<h3>Ophom Settings</h3>

Hue Bridge Status: <span id="ophom_generalstatus" class="badge badge-danger" style="background-color: #ff4b4b;">Not Linked</span>

<div style="margin-bottom: 25px;"></div>

 <!-- ###### BRIDGE PAIRING ###### -->
<div id="ophom_bridgenotlinked">
	<h4>Pairing to the Bridge</h4>
	<p>Click on the button below to start searching for your Philips Hue Bridge</p>
	<button id="ophom_searchbridgebutton" type="button" class="btn"><i class="fa fa-search"></i> Search my bridge</button>
	<br /><br />
	<span id="ophom_searchbridgestatus" style="display: none;"></span>
	<br />
	<div id="ophom_bridgefound" style="display: none;">
		<p>Click on "Start Pairing" button below and push the pairing button on your Bridge</p>
		<button id="ophom_pairingbridgebutton" class="btn"><i class="fa fa-link"></i> Start Pairing</button>
		<span id="ophom_pairingtrycount"></span>
		<br />
		<!-- <div class="controls">
			<input type="text" id="ophom_champtest" data-bind="value: settings.plugins.ophom.hue_token"/>
		</div> -->
		<img src="plugin/ophom/static/images/hue_pairing.png" />
	</div>
</div>

<!-- ###### BRIDGE RE FIND ###### -->
<div id="ophom_bridgeunreachable" style="display: none;">
	<h4>Looking for the Bridge</h4>
	<p>Click on the button below to start searching for your Philips Hue Bridge</p>
	<button id="ophom_researchbridgebutton" type="button" class="btn"><i class="fa fa-search"></i> Search my bridge</button>
	<br /><br />
	<span id="ophom_researchbridgestatus" style="display: none;"></span>
	<br />
	<div id="ophom_bridgerefound" style="display: none;">
		<br />
		<button id="ophom_researchbridgesave" type="button" class="btn"><i class="fa fa-save"></i> Apply new IP</button>
	</div>
</div>

 <!-- ###### BRIDGE CONFIGURATION ###### -->
<div id="ophom_bridgenotconfigured" style="display: none;">
	<h4>Bridge Configuration</h4>
	<span id="ophom_configuringstatus">Retrieving your Hue devices....</span>
	<br />
	<select id="ophom_plugselection" style="display: none;">
		<option value="">Choose a plug...</option>
	</select>
	<br />
	<!-- DEVICE NOT FOUND -->
	<div class="advanced_options">
		<div><small><a href="#" class="muted" data-bind="toggleContent: { class: 'fa-caret-right fa-caret-down', parent: '.advanced_options', container: '.hide' }"><i class="fa fa-caret-right"></i> Can't find your device ?</a></small></div>
		<div class="hide" style="display: none;">
			<div class="well">
				<p>If you can't find your device, please copy your Bridge configuration bellow and create a new issue on the <a href="https://github.com/Salamafet/ophom/issues" target="_blank">Github repository</a>.</p>
				<br />
				<textarea id="ophom_bridgejsonconfiguration" rows="10" style="width: 95%;"></textarea>
				<button onclick="this.previousElementSibling.select(); document.execCommand('copy');">Select and Copy</button>
			</div>
		</div>
	</div>
	
	<br />
	<button id="ophom_validplugselection" class="btn"><i class="fa fa-save"></i> Save Configuration</button>
</div>

<!-- #### AUTO OFF CONFIGURATION ####-->
<div id="ophom_autooffconfiguration" style="display: none;">
	<h4>Configuration</h4>

	<label class="checkbox" disabled>
		<input type="checkbox" value="" data-bind="checked: settings.plugins.ophom.auto_connect">
		Try to connect to printer after power On the plug ?
	</label>

	<table>
		<tr>
			<td>Time to wait before auto connect: </td>
			<td>
				<div class="input-append">
					<input class="span3 controls" id="auto_connect_time" type="text" data-bind="value: settings.plugins.ophom.auto_connect_time">
					<span class="add-on">sec</span>
				</div>
			</td>
		</tr>
	</table>

	<br />

	<div class="well">
		<blockquote>
			<p>Automatic Shutdown</p>
		</blockquote>
		<label class="checkbox" disabled>
			<input type="checkbox" data-bind="checked: settings.plugins.ophom.auto_off">
			Power Off the plug after print successfull finish ?
		</label>
		<br />
		Minimum temperature required for automatic shutdown:<br />
		<table>
			<tr>
				<td>Nozzle: </td>
				<td>
					<div class="input-append">
						<input class="span3 controls" id="nozzle" type="text" data-bind="value: settings.plugins.ophom.auto_off_nozzle_temp">
						<span class="add-on">C°</span>
					</div>
				</td>
			</tr>
			<tr>
				<td>Bed: </td>
				<td>
					<div class="input-append">
						<input class="span3" id="bed" type="text" data-bind="value: settings.plugins.ophom.auto_off_bed_temp">
						<span class="add-on">C°</span>
					</div>
				</td>
			</tr>
		</table>
		<br />
		Once the minimum temperature reached:
		<label class="radio">
			<input type="radio" name="optionsRadios" id="optionsRadios1" value="direct" data-bind="checked: settings.plugins.ophom.auto_off_type">
			Direct power off<br />
			<small>This option will directly turn off the plug</small>
		</label>
		<label class="radio">
			<input type="radio" name="optionsRadios" id="optionsRadios2" value="delayed" data-bind="checked: settings.plugins.ophom.auto_off_type">
			Delayed power off with system shutdown
			<small><font class="text-info">Usefull if you have a Raspberry Pi powered to printer PSU</font><br />This option will create a power off task on the bridge (2 minutes later) and Shutdown the system (the command must be defined in Settings -> Server)</small>
		</label>
	</div>

	<div class="well" style='background-color: #ffcece; border: 1px solid #e64e4e;'>
		<blockquote>
			<p>Security Shutdown</p>
		</blockquote>
		<label class="checkbox" disabled>
			<input type="checkbox" data-bind="checked: settings.plugins.ophom.security_connection_lost">
			Power Off the plug if the data connection to the printer is lost ?
		</label>
		<br />
		<label class="checkbox" disabled>
			<input type="checkbox" data-bind="checked: settings.plugins.ophom.security_emergency_stop">
			Power Off the plug if emergency stop (<b>M112</b>) is send to the printer ?
		</label>
		<br />
		Maximum temperature required for emergency shutdown <small><font class="text-info">Enter a high value for disabling</font></small>
		<table>
			<tr>
				<td>Nozzle: </td>
				<td>
					<div class="input-append">
						<input class="span3 controls" id="nozzle" type="text" data-bind="value: settings.plugins.ophom.security_nozzle_temp">
						<span class="add-on">C°</span>
					</div>
				</td>
			</tr>
			<tr>
				<td>Bed: </td>
				<td>
					<div class="input-append">
						<input class="span3" id="bed" type="text" data-bind="value: settings.plugins.ophom.security_bed_temp">
						<span class="add-on">C°</span>
					</div>
				</td>
			</tr>
		</table>

	</div>


	<div style="margin-top: 30px;"></div>
	<button class="btn btn-info" data-toggle="modal" href="#ophom_hue_rules" onclick="loadHueRules()">Hue System Rules</button>

	<!-- MODAL HUE RULES -->
	<div id="ophom_hue_rules" class="modal hide fade">
		<div class="modal-header">
			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
			<h3>Hue System Rules</h3>
		</div>
		
		<div class="modal-body"> 
			
			<p>In this section you can create rules for the rest of your hue devices when you power On or Off your printer.<br /><p class="text-warning">Only the rules created by Ophom are displayed here.</p></p>
			<br />
			<ul class="breadcrumb">
				<li><b>When printer goes <font style="color: #06c700;">On</font></b></li>
			</ul>
			<div id="ophom_hue_rules_on"></div>
			<style>
				.table th, .table td{
					text-align: center;   
				}
				select
				{
					margin-top: 10px;
				}
			</style>
			<table id="ophom_rules_table_on" class="table table-striped" style="display: none;">
				<thead>
					<tr>
						<th>Device</th>
						<th>Action</th>
						<th>Status</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody id="ophom_body_table_on"></tbody>
			</table>
			<br />
			<ul class="breadcrumb">
				<li><b>When printer goes <font style="color: red;">Off</font></b></li>
			</ul>
			<div id="ophom_hue_rules_off"></div>
			<table id="ophom_rules_table_off" class="table table-striped" style="display: none;">
				<thead>
					<tr>
						<th>Device</th>
						<th>Action</th>
						<th>Status</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody id="ophom_body_table_off"></tbody>
			</table>
			<br />
			<ul class="breadcrumb">
				<li><b>Add rule</b></li>
			</ul>
			When printer goes 
			<select id="ophom_rule_add_condition" class="span1">
				<option value="false">--</option>
				<option value="On">On</option>
				<option value="Off">Off</option>
			</select>, turn 
			<select id="ophom_rule_add_action" class="span1">
				<option value="false">--</option>
				<option value="On">On</option>
				<option value="Off">Off</option>
			</select>
			<select id="ophom_rule_add_device" class="span2">
				
			</select>
			<button class="btn btn-primary pull-right" style="margin-top: 10px;" onclick="addRule()">Add Rule</button>
			<div class="well well-small">
				<p style="color: #cc1e0c;">
					<b>⚠ Be aware !</b><br />
					This rules are created on your Philips Hue bridge and managed by him too.
					Even if don't use the On/Off fonction of Ophom, this rules are executed.
					<br /><br />
					Eg: If you use the official Hue App or the switch directly on the outlet, these rules are applied.
					<br /><br />
					The day you stop using Ophom/Octoprint you need to delete the rules yourself.
				</p>
			</div>
			<p style="text-align: center">
				<button id="ophom_hue_rules_save" type="submit" class="btn btn-success" disabled onclick="sendNewRules()">Send rules to the Bridge</button>
				<button id="ophom_hue_rules_cancel" type="button" class="btn btn-warning" disabled onclick="loadHueRules()">Discard changes</button>
			</p>
		</div>
		
		<div class="modal-footer">
			<a href="#" class="btn" data-dismiss="modal">Close</a>
		</div>
	</div>
</div>

<br /><br />
<a href='https://github.com/Salamafet/ophom/blob/master/docs/usb_avoid_power.md' target='_blank'>ℹ Follow this instruction if your USB plug is powering your motherboard print</a>

<script>

	var bridge_ip_address = "";
	var general_status = document.getElementById("ophom_generalstatus");

	// ## Vérification du statut actuel de la config
	fetch(API_BASEURL + "plugin/ophom?action=isconfigured").then(function(response) {
		response.json().then(function(data) {
			if(data['reponse'] == 1)
			{
				bridgeConfiguration();
			}
			else if (data['reponse'] == 2) {
				autOffConfiguration();
			}
			else if(data['reponse'] == 3) {
				refindBridge();
			}
		})
	});

	document.getElementById("ophom_searchbridgebutton").addEventListener('click', function() {
		var search_button = this
		search_button.innerHTML = '<i class="fa fa-search"></i> Searching...';
		search_button.disabled = true;
		document.getElementById("ophom_searchbridgestatus").style.display = "none";
		document.getElementById("ophom_bridgefound").style.display = "none";

		fetch(API_BASEURL + "plugin/ophom?action=discover").then(function(response) {
			response.json().then(function(data) {
				console.log(data);
				if(data.length == 0)
				{
					search_button.innerHTML = '<i class="fa fa-search"></i> Search my bridge';
					search_button.disabled = false;
					document.getElementById("ophom_searchbridgestatus").style.display = "";
					document.getElementById("ophom_searchbridgestatus").innerHTML = "<font color='red'>Unable to find your Hue Bridge. Are you on the same network ?</font>";
				}
				else
				{
					bridge_ip_address = data[0].internalipaddress;
					search_button.innerHTML = '<i class="fa fa-search"></i> Search my bridge';
					search_button.disabled = false;
					document.getElementById("ophom_searchbridgestatus").style.display = "";
					document.getElementById("ophom_searchbridgestatus").innerHTML = "<font color='green'>Brige found (<i>"+ data[0].internalipaddress+"</i>) !</font>";
					document.getElementById("ophom_bridgefound").style.display = "";
				}
			});
		});
	});

	document.getElementById("ophom_pairingbridgebutton").addEventListener('click', function() {
		var pairing_bridge_button= document.getElementById("ophom_pairingbridgebutton");
		pairing_bridge_button.innerHTML = '<i class="fa fa-link"></i> Pairing...';
		pairing_bridge_button.disabled = true;
		var pairing_try_count = 0;
		var text_pairing_count = document.getElementById("ophom_pairingtrycount");
		text_pairing_count.innerHTML = "Try count: " + pairing_try_count + "/30";
		document.getElementById("ophom_searchbridgebutton").disabled = true;
		var interval_pairing = setInterval(function() {
			pairing_try_count += 1;
			text_pairing_count.innerHTML = "Try count: " + pairing_try_count + "/30";
			fetch(API_BASEURL + "plugin/ophom", {
				method: "POST",
				body : JSON.stringify({command: "pairing", ip: bridge_ip_address}),
				headers: { 'Content-Type': 'application/json'}
			}).then(function(response) {
				response.json().then(function(data) {
					console.info(data.reponse);
					if(data.reponse == "success")
					{
						clearInterval(interval_pairing);
						text_pairing_count.innerHTML = "<font color='green'>Succesfull Pairing !</font>";
						bridgeConfiguration();
					}
				});
			});
			if(pairing_try_count == 30)
			{
				clearInterval(interval_pairing);
				pairing_bridge_button.innerHTML = '<i class="fa fa-link"></i> Start Pairing';
				pairing_bridge_button.disabled = false;
				text_pairing_count.innerHTML = "<font color='red'>Unable to pair. Please try again</font>";
				document.getElementById("ophom_searchbridgebutton").disabled = false;
			}
		}, 1000);
	});

	function bridgeConfiguration()
	{
		general_status.innerHTML = "Linked but not Configured";
		general_status.style.backgroundColor = "#ff8f4b";
		document.getElementById("ophom_bridgenotlinked").style.display = "none";
		document.getElementById("ophom_bridgenotconfigured").style.display = "";

		fetch(API_BASEURL + "plugin/ophom?action=pluglist").then(function(response) {
			response.json().then(function(data) {
				document.getElementById("ophom_configuringstatus").innerHTML = "Select a plug in the list bellow";
				var list_plug = document.getElementById("ophom_plugselection");
				data.forEach(element => {
					var option = document.createElement("option");
					option.text = element[1];
					option.value = element[0];
					list_plug.add(option);
				});
				list_plug.style.display = "";
			})
		})

		fetch(API_BASEURL + "plugin/ophom?action=extractconfig").then(function(response) {
			response.json().then(function(data) {
				document.getElementById("ophom_bridgejsonconfiguration").innerHTML = JSON.stringify(data, undefined, 4);
			})
		})
	}

	document.getElementById("ophom_validplugselection").addEventListener('click', function() {
		var light_id = document.getElementById("ophom_plugselection").value;
		if(light_id != "")
		{
			fetch(API_BASEURL + "plugin/ophom", {
					method: "POST",
					body : JSON.stringify({command: "configuration", device_id: light_id}),
					headers: { 'Content-Type': 'application/json'}
				}).then(function(response) {
					response.json().then(function(data) {
						if(data.reponse == "success")
						{
							autOffConfiguration();
						}
					});
				});
		}
	});

	function refindBridge()
	{
		general_status.innerHTML = "Bridge configured but unreachable";
		general_status.style.backgroundColor = "rgb(17, 99, 255)";
		document.getElementById("ophom_bridgenotlinked").style.display = "none";
		document.getElementById("ophom_bridgenotconfigured").style.display = "none";
		document.getElementById("ophom_bridgeunreachable").style.display = "";

		document.getElementById("ophom_researchbridgebutton").addEventListener('click', function() {
			var search_button = this
			search_button.innerHTML = '<i class="fa fa-search"></i> Searching...';
			search_button.disabled = true;
			document.getElementById("ophom_researchbridgestatus").style.display = "none";
			document.getElementById("ophom_bridgerefound").style.display = "none";

			fetch(API_BASEURL + "plugin/ophom?action=discover").then(function(response) {
				response.json().then(function(data) {
					console.log(data);
					if(data.length == 0)
					{
						search_button.innerHTML = '<i class="fa fa-search"></i> Search my bridge';
						search_button.disabled = false;
						document.getElementById("ophom_researchbridgestatus").style.display = "";
						document.getElementById("ophom_researchbridgestatus").innerHTML = "<font color='red'>Unable to find your Hue Bridge. Are you on the same network ?</font>";
					}
					else
					{
						bridge_ip_address = data[0].internalipaddress;
						search_button.innerHTML = '<i class="fa fa-search"></i> Search my bridge';
						search_button.disabled = false;
						document.getElementById("ophom_researchbridgestatus").style.display = "";
						document.getElementById("ophom_researchbridgestatus").innerHTML = "<font color='green'>Brige found (<i>"+ data[0].internalipaddress+"</i>) !</font>";
						document.getElementById("ophom_bridgerefound").style.display = "";
					}
				});
			});
		});

		document.getElementById("ophom_researchbridgesave").addEventListener('click', function() {
			fetch(API_BASEURL + "plugin/ophom", {
				method: "POST",
				body : JSON.stringify({command: "changeip", ip: bridge_ip_address}),
				headers: { 'Content-Type': 'application/json'}
			}).then(function(response) {
				response.json().then(function(data) {
					if(data.reponse == "success")
					{
						document.location.reload(true);
					}
				});
			})
		})
	}

	function autOffConfiguration()
	{
		general_status.innerHTML = "Linked and Configured";
		general_status.style.backgroundColor = "rgb(6, 202, 27)";
		document.getElementById("ophom_bridgenotlinked").style.display = "none";
		document.getElementById("ophom_bridgenotconfigured").style.display = "none";
		document.getElementById("ophom_autooffconfiguration").style.display = "";
	}

	function loadHueRules()
	{
		var ophom_hue_rules_on = document.getElementById("ophom_hue_rules_on");
		var ophom_rules_table_on = document.getElementById("ophom_rules_table_on");
		var ophom_body_table_on = document.getElementById("ophom_body_table_on");
		var ophom_hue_rules_off = document.getElementById("ophom_hue_rules_off");
		var ophom_rules_table_off = document.getElementById("ophom_rules_table_off");
		var ophom_body_table_off = document.getElementById("ophom_body_table_off");

		var ophom_rule_add_device = document.getElementById("ophom_rule_add_device");

		document.getElementById("ophom_hue_rules_save").disabled = true;
		document.getElementById("ophom_hue_rules_cancel").disabled = true;

		fetch(API_BASEURL + "plugin/ophom?action=getbridgerules").then(function(response) {
			response.json().then(function(data) {

				ophom_rule_add_device.innerHTML = "";

				var option = document.createElement("option");
				option.text = "--";
				option.value = false;
				ophom_rule_add_device.add(option);

				Object.keys(data.lights).forEach(function(light){
					var option = document.createElement("option");
					option.text = data.lights[light];
					option.value = light;
					ophom_rule_add_device.add(option);
				});

				ophom_body_table_on.innerHTML = "";
				ophom_body_table_off.innerHTML = "";
				ophom_rules_table_on.style.display = "none";
				ophom_rules_table_off.style.display = "none";

				if(data.rules.on.length == 0)
				{
					ophom_hue_rules_on.innerHTML = "<p class='muted'>No rules right now</p>";
				}
				else
				{
					ophom_rules_table_on.style.display = "";	
					data.rules.on.forEach(function(rule) {
						if(rule.action) { var statut = "On";}else{ var statut = "Off";}
						var tr = ophom_body_table_on.insertRow();

						tr.dataset.id = rule.id;
						tr.dataset.action = statut;

						var td = tr.insertCell();
						td.appendChild(document.createTextNode(data.lights[rule.id]));

						td = tr.insertCell();
						td.appendChild(document.createTextNode(statut));

						td = tr.insertCell();
						var html_cell = document.createElement('span');
						html_cell.innerHTML = "Saved on the bridge";
						html_cell.classList.add("text-success"); 
						td.appendChild(html_cell);

						td = tr.insertCell();
						var html_cell = document.createElement('i');
						html_cell.classList.add("fa", "fa-trash");
						html_cell.style.cursor = "pointer";
						html_cell.addEventListener('click', function(){
							deleteRule(tr);
						})
						td.appendChild(html_cell);
					})
				}

				if(data.rules.off.length == 0)
				{
					ophom_hue_rules_off.innerHTML = "<p class='muted'>No rules right now</p>";
				}
				else
				{
					ophom_rules_table_off.style.display = "";
					data.rules.off.forEach(function(rule) {
						if(rule.action) { var statut = "On";}else{ var statut = "Off";}
						var tr = ophom_body_table_off.insertRow();

						tr.dataset.id = rule.id;
						tr.dataset.action = statut;

						var td = tr.insertCell();
						td.appendChild(document.createTextNode(data.lights[rule.id]));

						td = tr.insertCell();
						td.appendChild(document.createTextNode(statut));

						td = tr.insertCell();
						var html_cell = document.createElement('span');
						html_cell.innerHTML = "Saved on the bridge";
						html_cell.classList.add("text-success"); 
						td.appendChild(html_cell);

						td = tr.insertCell();
						var html_cell = document.createElement('i');
						html_cell.classList.add("fa", "fa-trash");
						html_cell.style.cursor = "pointer";
						html_cell.addEventListener('click', function(){
							deleteRule(tr);
						})
						td.appendChild(html_cell);
					})
				}
			});
		});
	}

	function deleteRule(row)
	{
		document.getElementById("ophom_hue_rules_save").disabled = false;
		document.getElementById("ophom_hue_rules_cancel").disabled = false;
		row.classList.add("error");
		row.cells[2].innerHTML = "<span class='text-error'>Pending for deletion</span>";
		row.cells[3].innerHTML = "";
		row.dataset.delete = true;
	}

	function addRule()
	{
		document.getElementById("ophom_hue_rules_save").disabled = false;
		document.getElementById("ophom_hue_rules_cancel").disabled = false;

		var condition = document.getElementById("ophom_rule_add_condition");
		var action = document.getElementById("ophom_rule_add_action");
		var device = document.getElementById("ophom_rule_add_device");

		if(condition.value != "false" && action.value != "false" && device.value != "false")
		{
			if(condition.value == "On")
			{
				var ophom_hue_rules = document.getElementById("ophom_hue_rules_on");
				var ophom_rules_table = document.getElementById("ophom_rules_table_on");
				var ophom_body_table = document.getElementById("ophom_body_table_on");
			}
			else
			{
				var ophom_hue_rules = document.getElementById("ophom_hue_rules_off");
				var ophom_rules_table = document.getElementById("ophom_rules_table_off");
				var ophom_body_table = document.getElementById("ophom_body_table_off");
			}

			ophom_hue_rules.innerHTML = "";
			ophom_rules_table.style.display = "";

			var tr = ophom_body_table.insertRow();

			tr.dataset.id = device.value;
			tr.dataset.action = action.value;

			tr.classList.add("info");

			var td = tr.insertCell();
			td.appendChild(document.createTextNode(device.options[device.options.selectedIndex].text));

			td = tr.insertCell();
			td.appendChild(document.createTextNode(action.value));

			td = tr.insertCell();
			var html_cell = document.createElement('span');
			html_cell.innerHTML = "Pending for registration";
			html_cell.classList.add("text-info"); 
			td.appendChild(html_cell);

			td = tr.insertCell();
			var html_cell = document.createElement('i');
			td.appendChild(html_cell);
		}
	}

	function sendNewRules()
	{

		var ophom_body_table_on = document.getElementById("ophom_body_table_on");
		var ophom_body_table_off = document.getElementById("ophom_body_table_off");

		var rules = {};
		rules.on = [];
		rules.off = [];


		// On rules
		for(rule of ophom_body_table_on.rows)
		{
			if(rule.dataset.delete == undefined)
			{
				rules.on.push({"id": rule.dataset.id, "action": rule.dataset.action});
			}
		}

		// Off rules
		for(rule of ophom_body_table_off.rows)
		{
			if(rule.dataset.delete == undefined)
			{
				rules.off.push({"id": rule.dataset.id, "action": rule.dataset.action});
			}
		}

		fetch(API_BASEURL + "plugin/ophom", {
					method: "POST",
					body : JSON.stringify({command: "updaterules", "rules": rules}),
					headers: { 'Content-Type': 'application/json'}
				}).then(function(response) {
					response.json().then(function(data) {
						if(data.reponse == "success")
						{
							loadHueRules();
						}
					});
				});
	}

</script>